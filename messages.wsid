WEBSOCKET INTERFACE DOCUMENTATION
------------------------------------------------------------------
ismovelegal
  Check move for legality
  
  Request Format:
       {"method": "ismovelegal", 
        "board": [["r","n","b","q","k","b","n","r"],
                ["p","p","p","p","p","p","p","p"],
                [".",".",".",".",".",".",".","."],
                [".",".",".",".",".",".",".","."],
                [".",".",".",".",".",".",".","."],
                [".",".",".",".",".",".",".","."],
                ["P","P","P","P","P","P","P","P"],
                ["R","N","B","Q","K","B","N","R"]],
        "move": {"from": [row,col],
                "to": [row,col]},
        "flags": [white_king, white_krook, white_qrook, black_king, black_krook, black_qrook, en_passant],
        "en_passant_targets": [[row_1,col_1],[row_2,col_2]],
        "player": "w",
        "opponent": "b"}
  Return Format (example):
      {"result": true,
      "checkmate": false, 
       "error": "none"}

------------------------------------------------------------------
getminimaxmove
  get a move for a minimax ai
  
  Request Format (example):
      {"method": "getminimaxmove",
       "board": [["r","n","b","q","k","b","n","r"],
                ["p","p","p","p","p","p","p","p"],
                [".",".",".",".",".",".",".","."],
                [".",".",".",".",".",".",".","."],
                [".",".",".",".",".",".",".","."],
                [".",".",".",".",".",".",".","."],
                ["P","P","P","P","P","P","P","P"],
                ["R","N","B","Q","K","B","N","R"]],
       "player": "b"}
  Return Format:
      {"move": {"from": [row,col],
                "to": [row,col]},
       "error": "none"}

------------------------------------------------------------------
geteval
  return evaluation for non-engine player

  Request Format (example):
      {"method": "geteval",
       "board": [["r","n","b","q","k","b","n","r"],
                ["p","p","p","p","p","p","p","p"],
                [".",".",".",".",".",".",".","."],
                [".",".",".",".",".",".",".","."],
                [".",".",".",".",".",".",".","."],
                [".",".",".",".",".",".",".","."],
                ["P","P","P","P","P","P","P","P"],
                ["R","N","B","Q","K","B","N","R"]],
       "player": "w"}
  Response Format:
      {"eval": 0.0,
       "error": "none"}

------------------------------------------------------------------
error
Response Format:
        {"error": "errorMessage"}

------------------------------------------------------------------
getpage
    Return html page content for current page

    Request Format:
        {"method": "getpage",
         "page": "page_name",
         "scripts": ["script_name",...,"script_name"]}

    Response Format:
        {"content": "page_content",
         "scripts": ["script.js",...,"script.js"],
         "error": "none"}

------------------------------------------------------------------
ucs
    Runs the uniform cost search algorithm on the given graph

    Request Format:
        {
            "method": "ucs",
            "nodes": {"nodeID_1": {"x": xVal, "y": yVal},..., "nodeID_N": {"x": xVal, "y": yVal}},
            "edges": {"edgeID_1": {"weight": edgeWeight, "par1": "parentNodeID_1"},..., "edgeID_N": {"weight": edgeWeight, "par1": "parentNodeID_1", "par2": "parentNodeID_2"}},
            "start": nodeID,
            "end": nodeID
        }

    Response Format:
        {
            "steps":[
                        {"frontier": [{"nodes":[(srcNodeID,destNodeID),...,(srcNodeID,destNodeID)], "cost": val},...,{"nodes":[(srcNodeID,destNodeID),...,(srcNodeID,destNodeID)], "cost": val}]:, "path": {"nodes":[(srcNodeID,destNodeID),...,(srcNodeID,destNodeID)], "cost": val}, "total_path": {"nodes":[(srcNodeID,destNodeID),...,(srcNodeID,destNodeID)], "cost": val}},
                        ...,
                        {"frontier": [{"nodes":[(srcNodeID,destNodeID),...,(srcNodeID,destNodeID)], "cost": val},...,{"nodes":[(srcNodeID,destNodeID),...,(srcNodeID,destNodeID)], "cost": val}]:, "path": {"nodes":[(srcNodeID,destNodeID),...,(srcNodeID,destNodeID)], "cost": val}, "total_path": {"nodes":[(srcNodeID,destNodeID),...,(srcNodeID,destNodeID)], "cost": val}}
                    ],
            "error": 0
        }